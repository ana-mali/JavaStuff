SingleLink Data Structures Tests

Tests are of the form:
  Test Operation {expected value}: actual value
  Contents: [contents from front to rear]

================================================================================
Testing SingleStack
----------------------------------------
SingleStack<Integer> source = new SingleStack<>();
  isEmpty {true}: true
----------------------------------------
Push values: [42, 4, 16, 37, 38, 42, 43]
  push: 42
  push: 4
  push: 16
  push: 37
  push: 38
  push: 42
  push: 43
  isEmpty {false}: false
  peek {43}: 43
  Contents: [42, 4, 16, 37, 38, 42, 43]
----------------------------------------
source.splitAlternate(left, right)
source
  isEmpty {true}: true
  Contents: []
left
  isEmpty {false}: false
  peek {42}: 43
  Contents: [42, 16, 38, 43]
right
  isEmpty {false}: false
  peek {4}: 42
  Contents: [4, 37, 42]
----------------------------------------
target.combine(left, right)
target
  isEmpty {false}: false
  peek {43}: 42
  Contents: [42, 16, 38, 43, 4, 37, 42]
left
  isEmpty {true}: true
  Contents: []
right
  isEmpty {true}: true
  Contents: []
----------------------------------------
Clear target
  Pop {43}: 42
  Pop {42}: 37
  Pop {38}: 4
  Pop {37}: 43
  Pop {16}: 38
  Pop {4}: 16
  Pop {42}: 42

================================================================================
Testing SingleQueue
----------------------------------------
SingleQueue<Integer> source = new SingleQueue<>();
  isEmpty {true}: true
----------------------------------------
Insert values: [38, 34, 29, 35, 18, 47, 18]
  insert: 38
  insert: 34
  insert: 29
  insert: 35
  insert: 18
  insert: 47
  insert: 18
  isEmpty {false}: false
  peek {38}: 38
  Contents: [38, 34, 29, 35, 18, 47, 18]
----------------------------------------
source.splitAlternate(left, right)
source
  isEmpty {true}: true
  Contents: []
left
  isEmpty {false}: false
  peek {38}: 38
  Contents: [38, 34, 29, 35, 18, 47, 18]
right
  isEmpty {false}: true
  peek {34}: null
  Contents: []
----------------------------------------
target.combine(left, right)
target
  isEmpty {false}: false
  peek {38}: 38
  Contents: [38, 34, 29, 35, 18, 47]
left
  isEmpty {true}: true
  Contents: []
right
  isEmpty {true}: true
  Contents: []
----------------------------------------
Clear target
  remove {38}: 38
  remove {34}: 34
  remove {29}: 29
  remove {35}: 35
  remove {18}: 18
  remove {47}: 47

================================================================================
Testing SinglePriorityQueue
----------------------------------------
SinglePriorityQueue<Integer> source = new SinglePriorityQueue<>();
  isEmpty {true}: true
----------------------------------------
Insert values: [12, 5, 43, 43, 29, 25, 13]
  insert: 12
  insert: 5
  insert: 43
  insert: 43
  insert: 29
  insert: 25
  insert: 13
  isEmpty {false}: false
  peek {12}: 5
  Contents: [5, 12, 13, 25, 29, 43, 43]
----------------------------------------
source.splitByKey(25, left, right)
source
  isEmpty {true}: true
  Contents: []
left
  isEmpty {false}: false
  peek {5}: 25
  Contents: [25, 29, 43, 43]
right
  isEmpty {false}: false
  peek {25}: 5
  Contents: [5, 12, 13]
----------------------------------------
target.combine(left, right)
target
  isEmpty {false}: false
  peek {5}: 5
  Contents: [5, 12, 13, 25, 29, 43, 43]
left
  isEmpty {true}: false
  Contents: [25, 29, 43, 43]
right
  isEmpty {true}: false
  Contents: [5, 12, 13]
----------------------------------------
Clear target
  remove {5}: 5
  remove {12}: 12
  remove {13}: 13
  remove {25}: 25
  remove {29}: 29
  remove {43}: 43
  remove {43}: 43

================================================================================
Testing SingleList
----------------------------------------
SingleList<Integer> source = new SingleList<>();
  isEmpty {true}: true
----------------------------------------
Append values: [14, 31]
  append: 14
  append: 31
  isEmpty {false}: false
  peek {14}: 14
  Contents: [14, 31]
----------------------------------------
prepend: 13
  isEmpty {false}: false
  peek {13}: 13
  Contents: [13, 14, 31]
----------------------------------------
Insert values: [14, 31]
  insert: (1, 25)
  insert: (2, 17)
  insert: (3, 30)
  insert: (4, 2)
  isEmpty {false}: false
  peek {13}: 13
  Contents: [13, 25, 17, 30, 2, 14, 31]
----------------------------------------
contains 999 {false}: false
contains 30 {true}: true
----------------------------------------
find 999 {null}: 
find 30 {30}: 30
----------------------------------------
get 3 {30}: 30
----------------------------------------
index 30 {3}: 3
index 999 {-1}: -1
----------------------------------------
max {31}: 31
min {2}: 2
----------------------------------------
Contents: [13, 25, 17, 30, 2, 14, 31]
  count 999 {0}: 0
Contents: [75, 75, 75, 75, 75, 75, 75]
  count 75 {7}: 7
----------------------------------------
Contents: [75, 75, 75, 75, 75, 75, 75]
  clean {[75]}: [75, 75, 75, 75]
----------------------------------------
Contents: [75, 75, 75, 75, 75, 75, 75]
  removeMany 999 {[75, 75, 75, 75, 75, 75, 75]}: [75, 75, 75, 75, 75, 75, 75]
  removeMany 75 {[]}: [75, 75, 75]
----------------------------------------
Contents: [13, 25, 17, 30, 2, 14, 31]
  removeFront {13}: 13
----------------------------------------
Contents: [25, 17, 30, 2, 14, 31]
  remove 999 {null}: null
  remove 31 {31}: 31
Contents: [25, 17, 30, 2, 14]
----------------------------------------
Contents: [13, 25, 17, 30, 2, 14, 31]
  reverse {[31, 14, 2, 30, 17, 25, 13]}: [31, 14, 2, 30, 17, 25, 13]
----------------------------------------
Contents: [13, 25, 17, 30, 2, 14, 31]
  split {[13, 25, 17, 30], [2, 14, 31]}: [13, 25, 17, 30], [2, 14, 31]
----------------------------------------
Contents: [13, 25, 17, 30, 2, 14, 31]
  splitAlternate {[13, 17, 2, 31], [25, 30, 14]}: [13, 17, 2, 31], [25, 30, 14]
----------------------------------------
Contents: [13, 17, 2, 31], [25, 30, 14]
  combine {[13, 25, 17, 30, 2, 14, 31]}: [13, 25, 17, 30, 2, 14, 31]
----------------------------------------
Contents: [], []
  identical {true}: true
Contents: [13, 25, 17, 30, 2, 14, 31], [13, 25, 17, 30, 2, 14, 31]
  identical {true}: true
Contents: [13, 25, 17, 30, 2, 14, 31], [2, 13, 14, 17, 25, 30, 31]
  identical {false}: false
----------------------------------------
Contents: [2, 3, 1, 6, 0, 5, 4], [3, 1, 4, 6, 5, 0, 2]
  intersection {[2, 3, 1, 6, 0, 5, 4]}: [2, 3, 1, 6, 0, 5, 4]
Contents: [2, 3, 1, 6, 0, 5, 4], [999]
  intersection {[]}: [2, 3, 1, 6, 0, 5, 4, 999]
----------------------------------------
Contents: [2, 3, 1], [6, 0, 5, 4]
  union {[2, 3, 1, 6, 0, 5, 4]}: [2, 3, 1, 6, 0, 5, 4]